<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RSA Analysis</title>
    <link>https://prisha247.github.io/QuantumCryptography/</link>
    <description>Recent content on RSA Analysis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://prisha247.github.io/QuantumCryptography/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lists</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/lists/</guid>
      <description>Lists Unordered  Dolor pulvinar etiam. Sagittis lorem eleifend. Felis feugiat dolore viverra. Dolor pulvinar etiam.  Ordered  Dolor pulvinar etiam. Etiam vel felis at viverra. Felis enim feugiat magna. Etiam vel felis nullam. Felis enim et tempus.  Actions PrimaryDefaultAlt SmallSmallSmall PrimaryDefaultAlt PrimarySmall DefaultSmall </description>
    </item>
    
    <item>
      <title>Table</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/table/</guid>
      <description>Table Default    NAME DESCRIPTION PRICE     Item 1 Ante turpis integer aliquet porttitor. 29.99   Item 2 Vis ac commodo adipiscing arcu aliquet. 19.99   Item 3 Morbi faucibus arcu accumsan lorem. 29.99   Item 4 Vitae integer tempus condimentum. 19.99   Item 5 Ante turpis integer aliquet porttitor. 29.99     100.00    </description>
    </item>
    
    <item>
      <title>Buttons</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/buttons/</guid>
      <description>Buttons PRIMARYDEFAULT LARGEDEFAULTSMALL FITFIT FIT &amp;#43; SMALLFIT &amp;#43; SMALL ICONICON PRIMARYDEFAULT </description>
    </item>
    
    <item>
      <title>Math Behind the RSA Algorithm</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/text/</guid>
      <description>Math Behind The RSA Algorithm this is where we will explain the deeper math behind the algorithm.
here will be an example of the algorithm in use, possibly with an animation, to make it easier for the viewer to understand.
How Can Factoring Break the Algorithm? add more description, and pictures, and quotes/equations from the reading i didFuture Steps introduce quantum cryptography, and urge the audience to go to the next page, where we will talk about shor&amp;rsquo;s algorithm.</description>
    </item>
    
    <item>
      <title>Form</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/form/</guid>
      <description>Form - Category -ManufacturingShippingAdministrationHuman ResourcesLowNormalHighEmail me a copyI am a human   </description>
    </item>
    
    <item>
      <title>Image</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/image/</guid>
      <description>Image Fit  Gallery  Left &amp;amp; Right Fringilla nisl. Donec accumsan interdum nisi, quis tincidunt felis sagittis eget. tempus euismod. Vestibulum ante ipsum primis in faucibus vestibulum. Blandit adipiscing eu felis iaculis volutpat ac adipiscing accumsan eu faucibus. Integer ac pellentesque praesent tincidunt felis sagittis eget. tempus euismod. Vestibulum ante ipsum primis in faucibus vestibulum. Blandit adipiscing eu felis iaculis volutpat ac adipiscing accumsan eu faucibus.</description>
    </item>
    
    <item>
      <title>Additional Resources  Bibliography</title>
      <link>https://prisha247.github.io/QuantumCryptography/proofs/bib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/proofs/bib/</guid>
      <description>Additional Resources + Bibliography “Calculate d from n, e, p, q in RSA?” Stack Overflow, stackoverflow.com/questions/23279208/calculate-d-from-n-e-p-q-in-rsa. (This JavaScript code helps calculate the modular inverse using an iterative algorithm for the RSA algorithm.)
“Calculate Modular Exponentiation (PowerMod) in Javascript (a^p % n).” Syed Umar Anis, 13 July 2018, umaranis.com/2018/07/12/calculate-modular-exponentiation-powermod-in-javascript-ap-n/. (This helped with modular exponentiation without access to big numbers in JavaScript.)
“Check a Number Is Prime or Not Using JavaScript.” GeeksforGeeks, 15 July 2019, www.</description>
    </item>
    
    <item>
      <title>Chinese Remainder Theorem</title>
      <link>https://prisha247.github.io/QuantumCryptography/proofs/crt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/proofs/crt/</guid>
      <description>The Chinese Remainder Theorem (CRT) can help solve systems of equations for modular arithmetic equations. For example, we will use CRT to solve the below problem:
$$ x \equiv 2\ (\bmod 3)$$ $$ x \equiv 1\ (\bmod 4)$$ $$ x \equiv 3\ (\bmod 5)$$
With CRT, we can solve this system of equations as if they were three independent equations. Consider the solution for x to be in the following form:</description>
    </item>
    
    <item>
      <title>Discrete Math meets Cryptography</title>
      <link>https://prisha247.github.io/QuantumCryptography/rsamath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/rsamath/</guid>
      <description>Math Behind The RSA Algorithm RSA (Rivest, Shamir, and Adleman) Algorithm is a method of cryptography used to secure communication. RSA involves a public key and private key. The public key can be known to everyone- it is used to encrypt messages. Messages encrypted using the public key can only be decrypted with the private key. The keys for the RSA algorithm are generated the following way:
Pick two prime numbers $p$ and $q$ and take their product ($N$).</description>
    </item>
    
    <item>
      <title>Euler Totient Theorem</title>
      <link>https://prisha247.github.io/QuantumCryptography/proofs/post2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/proofs/post2/</guid>
      <description>Euler’s Totient Function (mentioned as the $φ$ function in the RSA Algorithm page) measures the &amp;ldquo;breakability of a number&amp;rdquo; by calculating the number of coprimes of the product of two prime numbers, and is therefore used in the RSA algorithm to generate encryption keys (e). The greater the $φ$ number, the more possibilities of unique encryption keys.
Suppose $p$ is a prime number. Let the $φ$ function will provide the number of values which are prime relative to the $p$.</description>
    </item>
    
    <item>
      <title>Fermat Little Theorem</title>
      <link>https://prisha247.github.io/QuantumCryptography/proofs/fermat-little/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/proofs/fermat-little/</guid>
      <description>Description Fermat&amp;rsquo;s Little Theorem, also known as Euler&amp;rsquo;s Little Theorem, is an equation that involves modular equations with exponentiation, similar to the exponentiation done in RSA. More specifically, the theorem is as follows:
$$a^p \equiv a\ (\bmod p)$$
More specifically, $a$ can be any integer, and $p$ can be any prime number.
Corollary Dividing both sides by $a$ produces this corollary. Both this form and the above form can come in handy when solving modular arithmetic equations.</description>
    </item>
    
    <item>
      <title>Meet the Team</title>
      <link>https://prisha247.github.io/QuantumCryptography/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/about/</guid>
      <description>Prisha, Andrew, and Rishita are students at Olin College of Engineering. They created this website as part of their final project in Discrete Mathematics. Please feel free to reach out with any questions/comments/suggestions!
 </description>
    </item>
    
    <item>
      <title>Quantum Computing and the future of RSA</title>
      <link>https://prisha247.github.io/QuantumCryptography/quantum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/quantum/</guid>
      <description>What is Quantum Computing? “Quantum computing” is computation performed using a computing device based on the physical properties of matter at very small scale, also known as quantum mechanics
Classical computers, like the ones we use today, function based on transistors that encode data in binary digits, also known as bits, that can only be a “1” or a “0”. Quantum computers, however, use “qubits,” where a single qubit is able to encode many more than two states.</description>
    </item>
    
  </channel>
</rss>
