<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RSA Analysis</title>
    <link>https://prisha247.github.io/QuantumCryptography/</link>
    <description>Recent content on RSA Analysis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://prisha247.github.io/QuantumCryptography/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lists</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/lists/</guid>
      <description>Lists Unordered  Dolor pulvinar etiam. Sagittis lorem eleifend. Felis feugiat dolore viverra. Dolor pulvinar etiam.  Ordered  Dolor pulvinar etiam. Etiam vel felis at viverra. Felis enim feugiat magna. Etiam vel felis nullam. Felis enim et tempus.  Actions PrimaryDefaultAlt SmallSmallSmall PrimaryDefaultAlt PrimarySmall DefaultSmall </description>
    </item>
    
    <item>
      <title>Table</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/table/</guid>
      <description>Table Default    NAME DESCRIPTION PRICE     Item 1 Ante turpis integer aliquet porttitor. 29.99   Item 2 Vis ac commodo adipiscing arcu aliquet. 19.99   Item 3 Morbi faucibus arcu accumsan lorem. 29.99   Item 4 Vitae integer tempus condimentum. 19.99   Item 5 Ante turpis integer aliquet porttitor. 29.99     100.00    </description>
    </item>
    
    <item>
      <title>Buttons</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/buttons/</guid>
      <description>Buttons PRIMARYDEFAULT LARGEDEFAULTSMALL FITFIT FIT &amp;#43; SMALLFIT &amp;#43; SMALL ICONICON PRIMARYDEFAULT </description>
    </item>
    
    <item>
      <title>Math Behind the RSA Algorithm</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/text/</guid>
      <description>Math Behind The RSA Algorithm this is where we will explain the deeper math behind the algorithm.
here will be an example of the algorithm in use, possibly with an animation, to make it easier for the viewer to understand.
How Can Factoring Break the Algorithm? add more description, and pictures, and quotes/equations from the reading i didFuture Steps introduce quantum cryptography, and urge the audience to go to the next page, where we will talk about shor&amp;rsquo;s algorithm.</description>
    </item>
    
    <item>
      <title>Form</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/form/</guid>
      <description>Form - Category -ManufacturingShippingAdministrationHuman ResourcesLowNormalHighEmail me a copyI am a human   </description>
    </item>
    
    <item>
      <title>Image</title>
      <link>https://prisha247.github.io/QuantumCryptography/elements/image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/elements/image/</guid>
      <description>Image Fit  Gallery  Left &amp;amp; Right Fringilla nisl. Donec accumsan interdum nisi, quis tincidunt felis sagittis eget. tempus euismod. Vestibulum ante ipsum primis in faucibus vestibulum. Blandit adipiscing eu felis iaculis volutpat ac adipiscing accumsan eu faucibus. Integer ac pellentesque praesent tincidunt felis sagittis eget. tempus euismod. Vestibulum ante ipsum primis in faucibus vestibulum. Blandit adipiscing eu felis iaculis volutpat ac adipiscing accumsan eu faucibus.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://prisha247.github.io/QuantumCryptography/proofs/post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/proofs/post/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About Us</title>
      <link>https://prisha247.github.io/QuantumCryptography/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/about/</guid>
      <description>Insert Content Here </description>
    </item>
    
    <item>
      <title>Chinese Remainder Theorem</title>
      <link>https://prisha247.github.io/QuantumCryptography/proofs/crt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/proofs/crt/</guid>
      <description>The Chinese Remainder Theorem (CRT) can help solve systems of equations for modular arithmetic equations. For example, we will use CRT to solve the below problem:
$$ x \equiv 2\ (\bmod 3)$$ $$ x \equiv 1\ (\bmod 4)$$ $$ x \equiv 3\ (\bmod 5)$$
With CRT, we can solve this system of equations as if they were three independent equations. Consider the solution for x to be in the following form:</description>
    </item>
    
    <item>
      <title>Contact Us</title>
      <link>https://prisha247.github.io/QuantumCryptography/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/contact/</guid>
      <description>Send us a message if you would like to learn more about quantum cryptography!
 </description>
    </item>
    
    <item>
      <title>Euler Totient Theorem</title>
      <link>https://prisha247.github.io/QuantumCryptography/proofs/post2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/proofs/post2/</guid>
      <description>Euler’s Totient Function (mentioned as the $φ$ function in the RSA Algorithm page) measures the &amp;ldquo;breakability of a number&amp;rdquo; by calculating the number of coprimes of the product of two prime numbers, and is therefore used in the RSA algorithm to generate encryption keys (e). The greater the $φ$ number, the more possibilities of unique encryption keys.
Suppose $p$ is a prime number. Let the $φ$ function will provide the number of values which are prime relative to the $p$.</description>
    </item>
    
    <item>
      <title>Fermat Little Theorem</title>
      <link>https://prisha247.github.io/QuantumCryptography/proofs/fermat-little/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/proofs/fermat-little/</guid>
      <description>Description Fermat&amp;rsquo;s Little Theorem, also known as Euler&amp;rsquo;s Little Theorem, is an equation that involves modular equations with exponentiation, similar to the exponentiation done in RSA. More specifically, the theorem is as follows:
$$a^p \equiv a\ (\bmod p)$$
More specifically, $a$ can be any integer, and $p$ can be any prime number.
Corollary Dividing both sides by $a$ produces this corollary. Both this form and the above form can come in handy when solving modular arithmetic equations.</description>
    </item>
    
    <item>
      <title>Math Behind RSA</title>
      <link>https://prisha247.github.io/QuantumCryptography/rsamath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/rsamath/</guid>
      <description>Math Behind The RSA Algorithm RSA involves a public key and private key. The public key can be known to everyone- it is used to encrypt messages. Messages encrypted using the public key can only be decrypted with the private key. The keys for the RSA algorithm are generated the following way:
Pick two prime numbers p and q and take their product (N). P and q are not released to the public.</description>
    </item>
    
    <item>
      <title>Quantum Computing and the future of RSA</title>
      <link>https://prisha247.github.io/QuantumCryptography/quantum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://prisha247.github.io/QuantumCryptography/quantum/</guid>
      <description>What is Quantum Computing? Donec eget ex magna. Interdum et malesuada fames ac ante ipsum primis in faucibus. Pellentesque venenatis dolor imperdiet dolor mattis sagittis. Praesent rutrum sem diam, vitae egestas enim auctor sit amet. Pellentesque leo mauris, consectetur id ipsum sit amet, fergiat. Pellentesque in mi eu massa lacinia malesuada et a elit. Donec urna ex, lacinia in purus ac, pretium pulvinar mauris. Nunc lorem mauris, fringilla in aliquam at, euismod in lectus.</description>
    </item>
    
  </channel>
</rss>
